import asyncio
import logging
from datetime import datetime
from buttons.users.main import main
from config import dp, db, loop, bot
import heandlers
import aioschedule
from aiogram import executor, types
from aiogram.dispatcher import FSMContext


@dp.message_handler(commands='start', state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨, {0.first_name}\n'
                         '–Ø –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç, –ø–æ–º–æ—â–Ω–∏–∫.\n'
                         '–Ø –ø–æ–º–æ–≥—É –í–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é, —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ '
                         '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª.'.format(
        message.from_user), reply_markup=main())


async def send_message():
    current_date = datetime.utcnow().date()
    users = db.fetchall("SELECT * FROM users")
    for user in users:
        date_of_birth = datetime.utcfromtimestamp(user[3] / 1000).date()
        if date_of_birth.month == current_date.month and date_of_birth.day == current_date.day:
            await bot.send_message(int(user[0]), text="–î–æ—Ä–æ–≥–æ–π –Ω–∞—à –≥–æ—Å—Ç—å,\n\n"
                                                      "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ –û—Ç –≤—Å–µ–π –¥—É—à–∏ –∂–µ–ª–∞–µ–º –≤–∞–º "
                                                      "—Ä–∞–¥–æ—Å—Ç–∏, —Å—á–∞—Å—Ç—å—è –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å.\n"
                                                      "\n"
                                                      "–í —á–µ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é "
                                                      "10% —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–∞—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å "
                                                      "–∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏ –∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞–ø–∏—Ç–∫–∞–º–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å "
                                                      "—ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –±–æ–ª–µ–µ –≤–∫—É—Å–Ω—ã–º.\n\n"
                                                      "–ò —ç—Ç–æ –Ω–µ –≤—Å—ë! –†–µ—Å—Ç–æ—Ä–∞–Ω –∞–∫—Ü–∏—é –µ—â—ë –Ω–∞ —Ç—Ä–∏ –¥–Ω—è –ø–æ—Å–ª–µ "
                                                      "–≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è. –¢–∞–∫ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è "
                                                      "–Ω–∞—à–∏–º –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ–º –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä—ë—Ö –¥–Ω–µ–π.\n\n"
                                                      "–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –∏ –≥–æ—Ä—è—á–∏–º–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏,\n\n"
                                                      "Happy People!")
            await bot.send_message(chat_id=5443287345, text=f"–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]} {user[2]} —Å–µ–≥–æ–¥–Ω—è –¥—Ä\n"
                                                            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user[4]}")


async def scheduler():
    aioschedule.every().day.at("10:00").do(send_message)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    logging.basicConfig(level=logging.INFO)
    db.create_tables()
    asyncio.create_task(scheduler())


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup, loop=loop)
