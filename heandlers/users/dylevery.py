from datetime import datetime
from aiogram.dispatcher import FSMContext
from aiogram.types import ChatActions
from buttons.users.dylevery import product_markup, categories_markup, menu_markup, category_cb, product_cb
from config import dp, db, bot
from aiogram import types


def time_dlv():
    current_time = str(datetime.now().time())
    return current_time


@dp.message_handler(text='üéí –î–æ—Å—Ç–∞–≤–∫–∞')
async def cmd_dyl(message: types.Message):
    if time_dlv()[0] == '2' and time_dlv()[1] == '3' \
            or time_dlv()[0] == '0' \
            or time_dlv()[0] == '1' and time_dlv()[1] == '0':
        await message.answer("–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Å 11:00 –¥–æ 23:00")
    else:
        db.query("INSERT INTO regime VALUES (?, ?)", (0, 1))
        is_allowed = db.fetchall('SELECT * FROM regime')
        if is_allowed[0][1] == 1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 1000 —Ä—É–±–ª–µ–π", reply_markup=menu_markup())
            await message.answer("–í–´–ë–ï–†–ò–¢–ï –†–ê–ó–î–ï–õ", reply_markup=categories_markup())
        else:
            await message.answer("–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


@dp.message_handler(text='üìñ –ú–ï–ù–Æ')
async def menu_dyl(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=categories_markup())


@dp.message_handler(text="‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction(message: types.Message):
    pass


@dp.message_handler(text="üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
async def pay(message: types.Message):
    pass


@dp.callback_query_handler(category_cb.filter(action='view_2'))
async def menu_dyl(call: types.CallbackQuery, callback_data: dict):
    products = db.fetchall('''SELECT * FROM products
        WHERE products.tag = (SELECT title FROM categories WHERE idx=?)''',
                           (callback_data['id'],))
    status = db.fetchall("SELECT * FROM status")
    await show_products(call.message, products, status)


@dp.callback_query_handler(product_cb.filter(action='add'))
async def add_product_callback_handler(query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    product_id = callback_data['id']
    db.query('INSERT INTO cart VALUES (?, ?, 1, null, null, null, null, null)',
            (query.message.chat.id, product_id))
    await query.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    await query.message.delete()


async def show_products(m, products, status):
    if len(products) == 0:
        await m.answer('–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üò¢')

        await bot.send_chat_action(m.chat.id, ChatActions.TYPING)
    else:
        for idx, title, body, image, price, _ in products:
            for id, stat in status:
                if idx in id and stat in 'start':
                    markup = product_markup(idx, price)
                    text = f'<b>{title}</b>\n\n{body}'
                    if image:
                        await m.answer_photo(photo=image,
                                             caption=text,
                                             reply_markup=markup)
                    else:
                        await m.answer(text=text, reply_markup=markup)


