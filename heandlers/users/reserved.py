from config import dp, bot, BRON_CHANNEL
from aiogram import types
from aiogram.dispatcher import FSMContext
from context.context import ReservedState
from buttons.users.main import main
from buttons.users.reserved import cancel_reserved, phone_number, people, time, date_day, done_or_cancel
from aiogram.types import ContentType


@dp.message_handler(text='üìû –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', state=None)
async def reserved_start(message: types.Message):
    await ReservedState.name.set()
    await message.answer('üë§ –ù–∞ —á—å–µ –∏–º—è –±—Ä–æ–Ω–∏—Ä—É–µ–º —Å—Ç–æ–ª?', reply_markup=cancel_reserved())


@dp.message_handler(state=ReservedState.name)
async def set_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text != "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            data['name'] = message.text
            await ReservedState.next()
            await message.answer('üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É?', reply_markup=date_day())
        else:
            await state.finish()
            await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main())


@dp.message_handler(state=ReservedState.date)
async def set_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
        await ReservedState.next()
        await message.answer('üïó –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ', reply_markup=time())


@dp.message_handler(state=ReservedState.time)
async def set_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = message.text
        await ReservedState.next()
        await message.answer('üë™ –ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π?', reply_markup=people())


@dp.message_handler(state=ReservedState.people)
async def set_people(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['people'] = message.text
        await ReservedState.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n'
                             '–•–æ—Å—Ç–µ—Å –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏.', reply_markup=phone_number())


@dp.message_handler(content_types=ContentType.CONTACT, state=ReservedState.phone_number)
async def set_phnumber_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.contact is not None:
            data['phone_number'] = message.contact["phone_number"]
            await ReservedState.next()
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n"
                                 f"–ë—É–¥–µ–º –∂–¥–∞—Ç—å, {data['time']} –≤ {data['people']}\n"
                                 f"–Ω–∞ –∏–º—è {data['name']}", reply_markup=done_or_cancel())


@dp.message_handler(state=ReservedState.phone_number)
async def set_phnumber(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
        await ReservedState.next()
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n"
                             f"–ë—É–¥–µ–º –∂–¥–∞—Ç—å, {data['time']} –≤ {data['people']}\n"
                             f"–Ω–∞ –∏–º—è {data['name']}", reply_markup=done_or_cancel())


@dp.message_handler(text="‚úÖ –í–µ—Ä–Ω–æ")
async def set_done(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(BRON_CHANNEL, f"–ë—Ä–æ–Ω—å\n"
                                             f"–§.–ò.–û: {data['name']}\n"
                                             f"–í—Ä–µ–º—è: {data['people']}\n"
                                             f"–î–∞—Ç–∞: {data['time']}\n"
                                             f"–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π: {data['date']}\n"
                                             f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone_number']}")
        await message.reply("–ë—Ä–æ–Ω—å –ø—Ä–∏–Ω—è—Ç–∞\n"
                            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=main())
    await state.finish()


@dp.message_handler(text="‚ùå –ù–µ—Ç")
async def set_cancel(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main())
    await state.finish()
