from aiogram import types
from aiogram.dispatcher import FSMContext

from buttons.users.main import main
from context.context import LoyalRegister
from config import dp, db, generate_number
from buttons.users.carta_loyal import loyal_markup, carta_loyal


@dp.message_handler(text='üí≥ –ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏')
async def start_loyal(message: types.Message):
    check_user = db.fetchone("SELECT id FROM users WHERE id = ?", (message.from_user.id,))
    if not check_user:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!", reply_markup=loyal_markup())
    else:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!", reply_markup=carta_loyal())


@dp.message_handler(text="üí≥ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")
async def virt_cart(message: types.Message):
    cart_number = db.fetchone("SELECT entry_number FROM users WHERE id = ?", (message.from_user.id,))
    await message.answer(f"<b>–ü—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b> \n(–≤–º–µ—Å—Ç–µ —Å –¥–µ—Ñ–∏—Å–æ–º, –æ–Ω –≤–∞–∂–µ–Ω)\n"
                         f"\n"
                         f"<b>{cart_number[0]}</b>", parse_mode="HTML")


@dp.message_handler(text="üëõ–ë–∞–ª–∞–Ω—Å")
async def sum_money_user(message: types.Message):
    balance = db.fetchone("SELECT balance FROM users WHERE id = ?", (message.from_user.id,))
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç <b>{balance[0]} —Ä—É–±</b>", parse_mode="HTML")


@dp.message_handler(text="üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    await state.set_state(LoyalRegister.name)


@dp.message_handler(state=LoyalRegister.name)
async def register_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(LoyalRegister.lastname)


@dp.message_handler(state=LoyalRegister.lastname)
async def register_lastname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['lastname'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä:\n"
                             "\n"
                             "–í —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (89123456789)")
        await state.set_state(LoyalRegister.phone_number)


@dp.message_handler(state=LoyalRegister.phone_number)
async def register_birthday(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ \n"
                             "(–ù–∞–ø—Ä–∏–º–µ—Ä: 31.01.1999).")
        await state.set_state(LoyalRegister.birthday)


@dp.message_handler(state=LoyalRegister.birthday)
async def register_phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['birthday'] = message.text
        entry_number = await generate_number()
        db.query(
            f"INSERT INTO users (id, name, lastname, birthday, phone_number, entry_number, balance) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (message.from_user.id, data['name'], data['lastname'], data['birthday'],
             data['phone_number'], entry_number, 0.0))
        await message.answer("–ü—Ä–∏–Ω—è—Ç–æ", reply_markup=main())
        await state.finish()


@dp.message_handler(text="üîô –ù–∞–∑–∞–¥")
async def register_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main())
